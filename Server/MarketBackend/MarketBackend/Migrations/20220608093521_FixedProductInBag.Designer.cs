// <auto-generated />
using System;
using MarketBackend.DataLayer.DatabaseObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarketBackend.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20220608093521_FixedProductInBag")]
    partial class FixedProductInBag
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("DataCart");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataProductInBag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("DataShoppingBagId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataShoppingBagId");

                    b.ToTable("DataProductInBag");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataShoppingBag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DataCartId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataCartId");

                    b.HasIndex("StoreId");

                    b.ToTable("DataShoppingBag");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.DataMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Password")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.DataNotification", b =>
                {
                    b.Property<string>("Notification")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DataMemberId")
                        .HasColumnType("int");

                    b.HasKey("Notification");

                    b.HasIndex("DataMemberId");

                    b.ToTable("DataNotification");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.DataPurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DataMember")
                        .HasColumnType("int");

                    b.Property<int>("DataStore")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurchaseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DataMember");

                    b.HasIndex("DataStore");

                    b.ToTable("DataPurchase");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataStore");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataProductInBag", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataShoppingBag", null)
                        .WithMany("ProductsAmounts")
                        .HasForeignKey("DataShoppingBagId");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataShoppingBag", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataCart", null)
                        .WithMany("ShoppingBags")
                        .HasForeignKey("DataCartId");

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStore", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.DataMember", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataCart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.DataNotification", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Buyers.DataMember", null)
                        .WithMany("PendingNotifications")
                        .HasForeignKey("DataMemberId");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.DataPurchase", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Buyers.DataMember", "Member")
                        .WithMany("PurchaseHistory")
                        .HasForeignKey("DataMember")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStore", "Store")
                        .WithMany()
                        .HasForeignKey("DataStore")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataCart", b =>
                {
                    b.Navigation("ShoppingBags");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataShoppingBag", b =>
                {
                    b.Navigation("ProductsAmounts");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.DataMember", b =>
                {
                    b.Navigation("PendingNotifications");

                    b.Navigation("PurchaseHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
