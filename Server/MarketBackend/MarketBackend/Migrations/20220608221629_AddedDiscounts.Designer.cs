// <auto-generated />
using System;
using MarketBackend.DataLayer.DatabaseObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarketBackend.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20220608221629_AddedDiscounts")]
    partial class AddedDiscounts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("DataCart");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataProductInBag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("DataShoppingBagId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataShoppingBagId");

                    b.ToTable("DataProductInBag");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataShoppingBag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DataCartId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataCartId");

                    b.HasIndex("StoreId");

                    b.ToTable("DataShoppingBag");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.DataMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("DataBidId")
                        .HasColumnType("int");

                    b.Property<int>("Password")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("DataBidId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.DataNotification", b =>
                {
                    b.Property<string>("Notification")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DataMemberId")
                        .HasColumnType("int");

                    b.HasKey("Notification");

                    b.HasIndex("DataMemberId");

                    b.ToTable("DataNotification");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.DataProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AmountInInventory")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DataStoreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerUnit")
                        .HasColumnType("float");

                    b.Property<double>("ProductDiscount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DataStoreId");

                    b.ToTable("DataProduct");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.DataProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProductId");

                    b.ToTable("DataProductReview");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.DataPurchaseOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DataProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOption")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataProductId");

                    b.ToTable("DataPurchaseOption");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.DataPurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DataMember")
                        .HasColumnType("int");

                    b.Property<int?>("DataStore")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurchaseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DataMember");

                    b.HasIndex("DataStore");

                    b.ToTable("DataPurchase");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataAppointmentsNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DataAppointmentsNodeId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataAppointmentsNodeId");

                    b.ToTable("DataAppointmentsNode");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataBid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Bid")
                        .HasColumnType("float");

                    b.Property<bool>("CounterOffer")
                        .HasColumnType("bit");

                    b.Property<int?>("DataStoreId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<double>("Offer")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataStoreId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProductId");

                    b.ToTable("DataBid");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataManagerPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DataStoreMemberRolesMemberId")
                        .HasColumnType("int");

                    b.Property<int?>("DataStoreMemberRolesStoreId")
                        .HasColumnType("int");

                    b.Property<int?>("Permission")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataStoreMemberRolesMemberId", "DataStoreMemberRolesStoreId");

                    b.ToTable("DataManagerPermission");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentsId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountManagerId")
                        .HasColumnType("int");

                    b.Property<int?>("FounderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentsId");

                    b.HasIndex("DiscountManagerId");

                    b.HasIndex("FounderId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStoreMemberRoles", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("DataStoreId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "StoreId");

                    b.HasIndex("DataStoreId");

                    b.ToTable("DataStoreMemberRoles");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DataDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DataStoreDiscountPolicyManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountExpressionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataStoreDiscountPolicyManagerId");

                    b.HasIndex("DiscountExpressionId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DataExpression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Expressions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DataExpression");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DataStoreDiscountPolicyManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("DataStoreDiscountPolicyManager");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataPredicateExpression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PredicateExpressions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DataPredicateExpression");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.DataConditionExpression", b =>
                {
                    b.HasBaseType("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DataExpression");

                    b.Property<int?>("DiscountExpressionId")
                        .HasColumnType("int");

                    b.Property<int?>("PredicateId")
                        .HasColumnType("int");

                    b.HasIndex("DiscountExpressionId");

                    b.HasIndex("PredicateId");

                    b.HasDiscriminator().HasValue("DataConditionExpression");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.DataIfDiscount", b =>
                {
                    b.HasBaseType("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DataExpression");

                    b.Property<int?>("ElseId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<int?>("ThenId")
                        .HasColumnType("int");

                    b.HasIndex("ElseId");

                    b.HasIndex("TestId");

                    b.HasIndex("ThenId");

                    b.HasDiscriminator().HasValue("DataIfDiscount");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.DataLogicalExpression", b =>
                {
                    b.HasBaseType("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataPredicateExpression");

                    b.Property<int?>("FirstId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondId")
                        .HasColumnType("int");

                    b.HasIndex("FirstId");

                    b.HasIndex("SecondId");

                    b.HasDiscriminator().HasValue("DataLogicalExpression");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.PredicatesExpressions.DataBagValuePredicate", b =>
                {
                    b.HasBaseType("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataPredicateExpression");

                    b.Property<int>("Worth")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DataBagValuePredicate");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.PredicatesExpressions.DataProductAmountPredicate", b =>
                {
                    b.HasBaseType("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataPredicateExpression");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DataProductAmountPredicate");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataDiscountExpression", b =>
                {
                    b.HasBaseType("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DataExpression");

                    b.Property<int?>("DataMaxExpressionId")
                        .HasColumnType("int");

                    b.HasIndex("DataMaxExpressionId");

                    b.HasDiscriminator().HasValue("DataDiscountExpression");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.BasicDiscounts.DataStoreDiscount", b =>
                {
                    b.HasBaseType("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataDiscountExpression");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DataStoreDiscount");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.LogicalExpressions.DataAndExpression", b =>
                {
                    b.HasBaseType("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.DataLogicalExpression");

                    b.HasDiscriminator().HasValue("DataAndExpression");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.LogicalExpressions.DataOrExpression", b =>
                {
                    b.HasBaseType("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.DataLogicalExpression");

                    b.HasDiscriminator().HasValue("DataOrExpression");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.LogicalExpressions.DataXorExpression", b =>
                {
                    b.HasBaseType("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.DataLogicalExpression");

                    b.HasDiscriminator().HasValue("DataXorExpression");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.NumericExpressions.DataMaxExpression", b =>
                {
                    b.HasBaseType("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataDiscountExpression");

                    b.HasDiscriminator().HasValue("DataMaxExpression");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.BasicDiscounts.DataDateDiscount", b =>
                {
                    b.HasBaseType("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.BasicDiscounts.DataStoreDiscount");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DataDateDiscount");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.BasicDiscounts.DataOneProductDiscount", b =>
                {
                    b.HasBaseType("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.BasicDiscounts.DataStoreDiscount");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DataOneProductDiscount");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataProductInBag", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataShoppingBag", null)
                        .WithMany("ProductsAmounts")
                        .HasForeignKey("DataShoppingBagId");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataShoppingBag", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataCart", null)
                        .WithMany("ShoppingBags")
                        .HasForeignKey("DataCartId");

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStore", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.DataMember", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataCart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId");

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataBid", null)
                        .WithMany("Approving")
                        .HasForeignKey("DataBidId");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.DataNotification", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Buyers.DataMember", null)
                        .WithMany("PendingNotifications")
                        .HasForeignKey("DataMemberId");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.DataProduct", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStore", null)
                        .WithMany("Products")
                        .HasForeignKey("DataStoreId");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.DataProductReview", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Buyers.DataMember", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.DataProduct", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId");

                    b.Navigation("Member");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.DataPurchaseOption", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.DataProduct", null)
                        .WithMany("PurchaseOptions")
                        .HasForeignKey("DataProductId");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.DataPurchase", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Buyers.DataMember", "Member")
                        .WithMany("PurchaseHistory")
                        .HasForeignKey("DataMember");

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStore", "Store")
                        .WithMany("PurchaseHistory")
                        .HasForeignKey("DataStore");

                    b.Navigation("Member");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataAppointmentsNode", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataAppointmentsNode", null)
                        .WithMany("Children")
                        .HasForeignKey("DataAppointmentsNodeId");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataBid", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStore", null)
                        .WithMany("Bids")
                        .HasForeignKey("DataStoreId");

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Buyers.DataMember", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.DataProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Member");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataManagerPermission", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStoreMemberRoles", null)
                        .WithMany("ManagerPermissions")
                        .HasForeignKey("DataStoreMemberRolesMemberId", "DataStoreMemberRolesStoreId");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStore", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataAppointmentsNode", "Appointments")
                        .WithMany()
                        .HasForeignKey("AppointmentsId");

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DataStoreDiscountPolicyManager", "DiscountManager")
                        .WithMany()
                        .HasForeignKey("DiscountManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Buyers.DataMember", "Founder")
                        .WithMany()
                        .HasForeignKey("FounderId");

                    b.Navigation("Appointments");

                    b.Navigation("DiscountManager");

                    b.Navigation("Founder");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStoreMemberRoles", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStore", null)
                        .WithMany("MembersPermissions")
                        .HasForeignKey("DataStoreId");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DataDiscount", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DataStoreDiscountPolicyManager", null)
                        .WithMany("Discounts")
                        .HasForeignKey("DataStoreDiscountPolicyManagerId");

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DataExpression", "DiscountExpression")
                        .WithMany()
                        .HasForeignKey("DiscountExpressionId");

                    b.Navigation("DiscountExpression");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.DataConditionExpression", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataDiscountExpression", "DiscountExpression")
                        .WithMany()
                        .HasForeignKey("DiscountExpressionId");

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataPredicateExpression", "Predicate")
                        .WithMany()
                        .HasForeignKey("PredicateId");

                    b.Navigation("DiscountExpression");

                    b.Navigation("Predicate");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.DataIfDiscount", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataDiscountExpression", "Else")
                        .WithMany()
                        .HasForeignKey("ElseId");

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataPredicateExpression", "Test")
                        .WithMany()
                        .HasForeignKey("TestId");

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataDiscountExpression", "Then")
                        .WithMany()
                        .HasForeignKey("ThenId");

                    b.Navigation("Else");

                    b.Navigation("Test");

                    b.Navigation("Then");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.DataLogicalExpression", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataPredicateExpression", "First")
                        .WithMany()
                        .HasForeignKey("FirstId");

                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataPredicateExpression", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId");

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountInterfaces.DataDiscountExpression", b =>
                {
                    b.HasOne("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.NumericExpressions.DataMaxExpression", null)
                        .WithMany("Discounts")
                        .HasForeignKey("DataMaxExpressionId");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataCart", b =>
                {
                    b.Navigation("ShoppingBags");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.Carts.DataShoppingBag", b =>
                {
                    b.Navigation("ProductsAmounts");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Buyers.DataMember", b =>
                {
                    b.Navigation("PendingNotifications");

                    b.Navigation("PurchaseHistory");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.DataProduct", b =>
                {
                    b.Navigation("PurchaseOptions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataAppointmentsNode", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataBid", b =>
                {
                    b.Navigation("Approving");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStore", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("MembersPermissions");

                    b.Navigation("Products");

                    b.Navigation("PurchaseHistory");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DataStoreMemberRoles", b =>
                {
                    b.Navigation("ManagerPermissions");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DataStoreDiscountPolicyManager", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("MarketBackend.DataLayer.DataDTOs.Market.StoreManagement.DiscountPolicy.DiscountExpressions.NumericExpressions.DataMaxExpression", b =>
                {
                    b.Navigation("Discounts");
                });
#pragma warning restore 612, 618
        }
    }
}
